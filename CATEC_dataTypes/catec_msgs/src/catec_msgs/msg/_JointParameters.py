"""autogenerated by genpy from catec_msgs/JointParameters.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class JointParameters(genpy.Message):
  _md5sum = "1efe63c9fcc48142ffc05c11f95d0b6a"
  _type = "catec_msgs/JointParameters"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string joint_name
float64 Kp
float64 Ki
float64 Kd
float64 i_min
float64 i_max
float64 effort
float64 velocity


"""
  __slots__ = ['joint_name','Kp','Ki','Kd','i_min','i_max','effort','velocity']
  _slot_types = ['string','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       joint_name,Kp,Ki,Kd,i_min,i_max,effort,velocity

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(JointParameters, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.joint_name is None:
        self.joint_name = ''
      if self.Kp is None:
        self.Kp = 0.
      if self.Ki is None:
        self.Ki = 0.
      if self.Kd is None:
        self.Kd = 0.
      if self.i_min is None:
        self.i_min = 0.
      if self.i_max is None:
        self.i_max = 0.
      if self.effort is None:
        self.effort = 0.
      if self.velocity is None:
        self.velocity = 0.
    else:
      self.joint_name = ''
      self.Kp = 0.
      self.Ki = 0.
      self.Kd = 0.
      self.i_min = 0.
      self.i_max = 0.
      self.effort = 0.
      self.velocity = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.joint_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d.pack(_x.Kp, _x.Ki, _x.Kd, _x.i_min, _x.i_max, _x.effort, _x.velocity))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.joint_name = str[start:end].decode('utf-8')
      else:
        self.joint_name = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.Kp, _x.Ki, _x.Kd, _x.i_min, _x.i_max, _x.effort, _x.velocity,) = _struct_7d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.joint_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d.pack(_x.Kp, _x.Ki, _x.Kd, _x.i_min, _x.i_max, _x.effort, _x.velocity))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.joint_name = str[start:end].decode('utf-8')
      else:
        self.joint_name = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.Kp, _x.Ki, _x.Kd, _x.i_min, _x.i_max, _x.effort, _x.velocity,) = _struct_7d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_7d = struct.Struct("<7d")
