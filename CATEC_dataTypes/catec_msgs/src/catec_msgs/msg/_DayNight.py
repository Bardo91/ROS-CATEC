"""autogenerated by genpy from catec_msgs/DayNight.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class DayNight(genpy.Message):
  _md5sum = "1938393faac749502c696eb029a7c7ec"
  _type = "catec_msgs/DayNight"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """time now
bool is_day_light
int32 days

"""
  __slots__ = ['now','is_day_light','days']
  _slot_types = ['time','bool','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       now,is_day_light,days

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DayNight, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.now is None:
        self.now = genpy.Time()
      if self.is_day_light is None:
        self.is_day_light = False
      if self.days is None:
        self.days = 0
    else:
      self.now = genpy.Time()
      self.is_day_light = False
      self.days = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2IBi.pack(_x.now.secs, _x.now.nsecs, _x.is_day_light, _x.days))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.now is None:
        self.now = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 13
      (_x.now.secs, _x.now.nsecs, _x.is_day_light, _x.days,) = _struct_2IBi.unpack(str[start:end])
      self.is_day_light = bool(self.is_day_light)
      self.now.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2IBi.pack(_x.now.secs, _x.now.nsecs, _x.is_day_light, _x.days))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.now is None:
        self.now = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 13
      (_x.now.secs, _x.now.nsecs, _x.is_day_light, _x.days,) = _struct_2IBi.unpack(str[start:end])
      self.is_day_light = bool(self.is_day_light)
      self.now.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2IBi = struct.Struct("<2IBi")
