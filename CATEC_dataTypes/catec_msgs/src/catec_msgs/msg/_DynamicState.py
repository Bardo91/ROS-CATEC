"""autogenerated by genpy from catec_msgs/DynamicState.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import catec_msgs.msg

class DynamicState(genpy.Message):
  _md5sum = "cef369e150c278d36d30afc4228349b1"
  _type = "catec_msgs/DynamicState"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """PositionWithCheck position
OrientationWithCheck orientation
VelocityWithCheck velocity
================================================================================
MSG: catec_msgs/PositionWithCheck
float64 x
float64 y
float64 z
uint8 valid
================================================================================
MSG: catec_msgs/OrientationWithCheck
float64 x
float64 y
float64 z
uint8 valid
================================================================================
MSG: catec_msgs/VelocityWithCheck
float64 x
float64 y
float64 z
uint8 valid
"""
  __slots__ = ['position','orientation','velocity']
  _slot_types = ['catec_msgs/PositionWithCheck','catec_msgs/OrientationWithCheck','catec_msgs/VelocityWithCheck']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       position,orientation,velocity

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DynamicState, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.position is None:
        self.position = catec_msgs.msg.PositionWithCheck()
      if self.orientation is None:
        self.orientation = catec_msgs.msg.OrientationWithCheck()
      if self.velocity is None:
        self.velocity = catec_msgs.msg.VelocityWithCheck()
    else:
      self.position = catec_msgs.msg.PositionWithCheck()
      self.orientation = catec_msgs.msg.OrientationWithCheck()
      self.velocity = catec_msgs.msg.VelocityWithCheck()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3dB3dB3dB.pack(_x.position.x, _x.position.y, _x.position.z, _x.position.valid, _x.orientation.x, _x.orientation.y, _x.orientation.z, _x.orientation.valid, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.velocity.valid))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.position is None:
        self.position = catec_msgs.msg.PositionWithCheck()
      if self.orientation is None:
        self.orientation = catec_msgs.msg.OrientationWithCheck()
      if self.velocity is None:
        self.velocity = catec_msgs.msg.VelocityWithCheck()
      end = 0
      _x = self
      start = end
      end += 75
      (_x.position.x, _x.position.y, _x.position.z, _x.position.valid, _x.orientation.x, _x.orientation.y, _x.orientation.z, _x.orientation.valid, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.velocity.valid,) = _struct_3dB3dB3dB.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3dB3dB3dB.pack(_x.position.x, _x.position.y, _x.position.z, _x.position.valid, _x.orientation.x, _x.orientation.y, _x.orientation.z, _x.orientation.valid, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.velocity.valid))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.position is None:
        self.position = catec_msgs.msg.PositionWithCheck()
      if self.orientation is None:
        self.orientation = catec_msgs.msg.OrientationWithCheck()
      if self.velocity is None:
        self.velocity = catec_msgs.msg.VelocityWithCheck()
      end = 0
      _x = self
      start = end
      end += 75
      (_x.position.x, _x.position.y, _x.position.z, _x.position.valid, _x.orientation.x, _x.orientation.y, _x.orientation.z, _x.orientation.valid, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.velocity.valid,) = _struct_3dB3dB3dB.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3dB3dB3dB = struct.Struct("<3dB3dB3dB")
