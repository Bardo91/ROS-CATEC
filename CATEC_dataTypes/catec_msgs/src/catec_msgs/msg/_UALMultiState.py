"""autogenerated by genpy from catec_msgs/UALMultiState.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import catec_msgs.msg

class UALMultiState(genpy.Message):
  _md5sum = "8c0ecfb59d571c1661041526978cfb99"
  _type = "catec_msgs/UALMultiState"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 uav_id
Position actual_position
Position next_position
uint8 blocked
================================================================================
MSG: catec_msgs/Position
float64 x
float64 y
float64 z
"""
  __slots__ = ['uav_id','actual_position','next_position','blocked']
  _slot_types = ['uint8','catec_msgs/Position','catec_msgs/Position','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       uav_id,actual_position,next_position,blocked

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(UALMultiState, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.uav_id is None:
        self.uav_id = 0
      if self.actual_position is None:
        self.actual_position = catec_msgs.msg.Position()
      if self.next_position is None:
        self.next_position = catec_msgs.msg.Position()
      if self.blocked is None:
        self.blocked = 0
    else:
      self.uav_id = 0
      self.actual_position = catec_msgs.msg.Position()
      self.next_position = catec_msgs.msg.Position()
      self.blocked = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_B6dB.pack(_x.uav_id, _x.actual_position.x, _x.actual_position.y, _x.actual_position.z, _x.next_position.x, _x.next_position.y, _x.next_position.z, _x.blocked))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.actual_position is None:
        self.actual_position = catec_msgs.msg.Position()
      if self.next_position is None:
        self.next_position = catec_msgs.msg.Position()
      end = 0
      _x = self
      start = end
      end += 50
      (_x.uav_id, _x.actual_position.x, _x.actual_position.y, _x.actual_position.z, _x.next_position.x, _x.next_position.y, _x.next_position.z, _x.blocked,) = _struct_B6dB.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_B6dB.pack(_x.uav_id, _x.actual_position.x, _x.actual_position.y, _x.actual_position.z, _x.next_position.x, _x.next_position.y, _x.next_position.z, _x.blocked))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.actual_position is None:
        self.actual_position = catec_msgs.msg.Position()
      if self.next_position is None:
        self.next_position = catec_msgs.msg.Position()
      end = 0
      _x = self
      start = end
      end += 50
      (_x.uav_id, _x.actual_position.x, _x.actual_position.y, _x.actual_position.z, _x.next_position.x, _x.next_position.y, _x.next_position.z, _x.blocked,) = _struct_B6dB.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B6dB = struct.Struct("<B6dB")
