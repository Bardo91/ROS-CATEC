"""autogenerated by genpy from catec_actions_msgs/GoToWayPointsGoal.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import catec_msgs.msg
import std_msgs.msg

class GoToWayPointsGoal(genpy.Message):
  _md5sum = "e95f53fa4d0604131f022990dac5737f"
  _type = "catec_actions_msgs/GoToWayPointsGoal"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#goal definition
catec_msgs/WayPointWithCruiseStamped[] way_points
uint32 size

================================================================================
MSG: catec_msgs/WayPointWithCruiseStamped
Header header
WayPointWithCruise way_point
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: catec_msgs/WayPointWithCruise
float64 x
float64 y
float64 z
float32 cruise
float64 heading
"""
  __slots__ = ['way_points','size']
  _slot_types = ['catec_msgs/WayPointWithCruiseStamped[]','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       way_points,size

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GoToWayPointsGoal, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.way_points is None:
        self.way_points = []
      if self.size is None:
        self.size = 0
    else:
      self.way_points = []
      self.size = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.way_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.way_points:
        _v1 = val1.header
        buff.write(_struct_I.pack(_v1.seq))
        _v2 = _v1.stamp
        _x = _v2
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v3 = val1.way_point
        _x = _v3
        buff.write(_struct_3dfd.pack(_x.x, _x.y, _x.z, _x.cruise, _x.heading))
      buff.write(_struct_I.pack(self.size))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.way_points is None:
        self.way_points = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.way_points = []
      for i in range(0, length):
        val1 = catec_msgs.msg.WayPointWithCruiseStamped()
        _v4 = val1.header
        start = end
        end += 4
        (_v4.seq,) = _struct_I.unpack(str[start:end])
        _v5 = _v4.stamp
        _x = _v5
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v4.frame_id = str[start:end].decode('utf-8')
        else:
          _v4.frame_id = str[start:end]
        _v6 = val1.way_point
        _x = _v6
        start = end
        end += 36
        (_x.x, _x.y, _x.z, _x.cruise, _x.heading,) = _struct_3dfd.unpack(str[start:end])
        self.way_points.append(val1)
      start = end
      end += 4
      (self.size,) = _struct_I.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.way_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.way_points:
        _v7 = val1.header
        buff.write(_struct_I.pack(_v7.seq))
        _v8 = _v7.stamp
        _x = _v8
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v7.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v9 = val1.way_point
        _x = _v9
        buff.write(_struct_3dfd.pack(_x.x, _x.y, _x.z, _x.cruise, _x.heading))
      buff.write(_struct_I.pack(self.size))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.way_points is None:
        self.way_points = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.way_points = []
      for i in range(0, length):
        val1 = catec_msgs.msg.WayPointWithCruiseStamped()
        _v10 = val1.header
        start = end
        end += 4
        (_v10.seq,) = _struct_I.unpack(str[start:end])
        _v11 = _v10.stamp
        _x = _v11
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v10.frame_id = str[start:end].decode('utf-8')
        else:
          _v10.frame_id = str[start:end]
        _v12 = val1.way_point
        _x = _v12
        start = end
        end += 36
        (_x.x, _x.y, _x.z, _x.cruise, _x.heading,) = _struct_3dfd.unpack(str[start:end])
        self.way_points.append(val1)
      start = end
      end += 4
      (self.size,) = _struct_I.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3dfd = struct.Struct("<3dfd")
_struct_2I = struct.Struct("<2I")
