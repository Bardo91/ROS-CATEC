/* Auto-generated by genmsg_cpp for file /home/catec/fuerte_workspace/uav/msg/FlightPlan.msg */
#ifndef UAV_MESSAGE_FLIGHTPLAN_H
#define UAV_MESSAGE_FLIGHTPLAN_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "geometry_msgs/Point.h"

namespace uav
{
template <class ContainerAllocator>
struct FlightPlan_ {
  typedef FlightPlan_<ContainerAllocator> Type;

  FlightPlan_()
  : header()
  , modeFp(0)
  , position()
  , weight(0.0)
  , velFlightPlan(0.0)
  , hFlightPlan(0.0)
  , courseFlightPlan(0.0)
  , headingFlightPlan(0.0)
  {
  }

  FlightPlan_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , modeFp(0)
  , position()
  , weight(0.0)
  , velFlightPlan(0.0)
  , hFlightPlan(0.0)
  , courseFlightPlan(0.0)
  , headingFlightPlan(0.0)
  {
    position.assign( ::geometry_msgs::Point_<ContainerAllocator> (_alloc));
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef uint8_t _modeFp_type;
  uint8_t modeFp;

  typedef boost::array< ::geometry_msgs::Point_<ContainerAllocator> , 3>  _position_type;
  boost::array< ::geometry_msgs::Point_<ContainerAllocator> , 3>  position;

  typedef double _weight_type;
  double weight;

  typedef double _velFlightPlan_type;
  double velFlightPlan;

  typedef double _hFlightPlan_type;
  double hFlightPlan;

  typedef double _courseFlightPlan_type;
  double courseFlightPlan;

  typedef double _headingFlightPlan_type;
  double headingFlightPlan;

  enum { POSITIONHEADINGMODE = 1 };
  enum { VELOCITYMODE = 2 };
  enum { VELOCITYHEADINGMODE = 3 };
  enum { POSITIONMODE = 4 };
  enum { POSITIONHEADINGMODEWITHVELOCITY = 5 };
  enum { POSITIONMODEWITHVELOCITY = 6 };

  typedef boost::shared_ptr< ::uav::FlightPlan_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::uav::FlightPlan_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct FlightPlan
typedef  ::uav::FlightPlan_<std::allocator<void> > FlightPlan;

typedef boost::shared_ptr< ::uav::FlightPlan> FlightPlanPtr;
typedef boost::shared_ptr< ::uav::FlightPlan const> FlightPlanConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::uav::FlightPlan_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::uav::FlightPlan_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace uav

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::uav::FlightPlan_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::uav::FlightPlan_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::uav::FlightPlan_<ContainerAllocator> > {
  static const char* value() 
  {
    return "476a9ca065e1e22ead3921e8ce01d228";
  }

  static const char* value(const  ::uav::FlightPlan_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x476a9ca065e1e22eULL;
  static const uint64_t static_value2 = 0xad3921e8ce01d228ULL;
};

template<class ContainerAllocator>
struct DataType< ::uav::FlightPlan_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uav/FlightPlan";
  }

  static const char* value(const  ::uav::FlightPlan_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::uav::FlightPlan_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
uint8 modeFp\n\
uint8 POSITIONHEADINGMODE=1\n\
uint8 VELOCITYMODE=2\n\
uint8 VELOCITYHEADINGMODE=3\n\
uint8 POSITIONMODE=4\n\
uint8 POSITIONHEADINGMODEWITHVELOCITY=5\n\
uint8 POSITIONMODEWITHVELOCITY=6\n\
geometry_msgs/Point[3] position\n\
float64 weight\n\
float64 velFlightPlan\n\
float64 hFlightPlan\n\
float64 courseFlightPlan\n\
float64 headingFlightPlan\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
";
  }

  static const char* value(const  ::uav::FlightPlan_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::uav::FlightPlan_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::uav::FlightPlan_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::uav::FlightPlan_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.modeFp);
    stream.next(m.position);
    stream.next(m.weight);
    stream.next(m.velFlightPlan);
    stream.next(m.hFlightPlan);
    stream.next(m.courseFlightPlan);
    stream.next(m.headingFlightPlan);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct FlightPlan_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::uav::FlightPlan_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::uav::FlightPlan_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "modeFp: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.modeFp);
    s << indent << "position[]" << std::endl;
    for (size_t i = 0; i < v.position.size(); ++i)
    {
      s << indent << "  position[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.position[i]);
    }
    s << indent << "weight: ";
    Printer<double>::stream(s, indent + "  ", v.weight);
    s << indent << "velFlightPlan: ";
    Printer<double>::stream(s, indent + "  ", v.velFlightPlan);
    s << indent << "hFlightPlan: ";
    Printer<double>::stream(s, indent + "  ", v.hFlightPlan);
    s << indent << "courseFlightPlan: ";
    Printer<double>::stream(s, indent + "  ", v.courseFlightPlan);
    s << indent << "headingFlightPlan: ";
    Printer<double>::stream(s, indent + "  ", v.headingFlightPlan);
  }
};


} // namespace message_operations
} // namespace ros

#endif // UAV_MESSAGE_FLIGHTPLAN_H

