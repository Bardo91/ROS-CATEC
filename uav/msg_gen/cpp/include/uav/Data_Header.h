/* Auto-generated by genmsg_cpp for file /home/catec/fuerte_workspace/uav/msg/Data_Header.msg */
#ifndef UAV_MESSAGE_DATA_HEADER_H
#define UAV_MESSAGE_DATA_HEADER_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace uav
{
template <class ContainerAllocator>
struct Data_Header_ {
  typedef Data_Header_<ContainerAllocator> Type;

  Data_Header_()
  : seq(0)
  , stamp(0.0)
  , frame_id()
  , status(false)
  , quality(0)
  {
  }

  Data_Header_(const ContainerAllocator& _alloc)
  : seq(0)
  , stamp(0.0)
  , frame_id(_alloc)
  , status(false)
  , quality(0)
  {
  }

  typedef uint32_t _seq_type;
  uint32_t seq;

  typedef double _stamp_type;
  double stamp;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _frame_id_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  frame_id;

  typedef uint8_t _status_type;
  uint8_t status;

  typedef int8_t _quality_type;
  int8_t quality;


  typedef boost::shared_ptr< ::uav::Data_Header_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::uav::Data_Header_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Data_Header
typedef  ::uav::Data_Header_<std::allocator<void> > Data_Header;

typedef boost::shared_ptr< ::uav::Data_Header> Data_HeaderPtr;
typedef boost::shared_ptr< ::uav::Data_Header const> Data_HeaderConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::uav::Data_Header_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::uav::Data_Header_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace uav

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::uav::Data_Header_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::uav::Data_Header_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::uav::Data_Header_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e475a694e3cb9e70aac3eb08dae30d26";
  }

  static const char* value(const  ::uav::Data_Header_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xe475a694e3cb9e70ULL;
  static const uint64_t static_value2 = 0xaac3eb08dae30d26ULL;
};

template<class ContainerAllocator>
struct DataType< ::uav::Data_Header_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uav/Data_Header";
  }

  static const char* value(const  ::uav::Data_Header_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::uav::Data_Header_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint32 seq\n\
float64 stamp\n\
string frame_id\n\
bool status\n\
byte quality\n\
";
  }

  static const char* value(const  ::uav::Data_Header_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::uav::Data_Header_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.seq);
    stream.next(m.stamp);
    stream.next(m.frame_id);
    stream.next(m.status);
    stream.next(m.quality);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Data_Header_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::uav::Data_Header_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::uav::Data_Header_<ContainerAllocator> & v) 
  {
    s << indent << "seq: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.seq);
    s << indent << "stamp: ";
    Printer<double>::stream(s, indent + "  ", v.stamp);
    s << indent << "frame_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.frame_id);
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
    s << indent << "quality: ";
    Printer<int8_t>::stream(s, indent + "  ", v.quality);
  }
};


} // namespace message_operations
} // namespace ros

#endif // UAV_MESSAGE_DATA_HEADER_H

